<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

function formatDecimal($value)
{
    $value = str_replace(',', '.', $value);

    if (!is_numeric($value)) {
        throw new \InvalidArgumentException('Value must be a valid number.');
    }

    return $value;
}

/**
 * Generate a session ID based on the user's User-Agent, IP address, and phone number.
 *
 * @param Request $request
 *
 * @return string
 */
function getSessionId(Request $request): string
{
    $userAgent = $request->header('User-Agent') ?? 'unknown';
    $ipAddress = $request->ip() ?? '0.0.0.0';

    $phone = Auth::user()->phone ?? 'unknown';

    $sessionId = hash('sha256', $userAgent . '|' . $ipAddress . '|' . $phone);

    return $sessionId;
}

/**
 * Verify session ID sent from frontend matches with the one generated by this application based on user's User-Agent and IP address.
 *
 * @param Request $request
 *
 * @return bool
 */
function verifySessionId(Request $request, string $sessionId): bool
{
    // Buat ulang session ID berdasarkan data sekarang
    $generatedSessionId = getSessionId($request);

    // Bandingkan apakah session ID yang dikirim cocok dengan yang kita generate
    if ($generatedSessionId === $sessionId) {
        return true;
    }

    return false;
}

/**
 * Convert a number to Indonesian Rupiah currency format.
 *
 * @param float|int $angka The number to be converted.
 *
 * @return string The formatted currency string in Rupiah.
 */

function convertRp($angka)
{
    return 'Rp ' . number_format($angka, 0, ',', '.');
}

/**
 * Calculate the execution time of a given code block.
 *
 * @param float $startTime The microtime(true) value when the execution started.
 *
 * @return string The duration of the execution in seconds, rounded to 2 decimal places.
 */
function executionTime(float $startTime): string
{
    $endTime = microtime(true);
    $duration = (int) round($endTime - $startTime);

    $days = floor($duration / 86400);
    $hours = floor(($duration % 86400) / 3600);
    $minutes = floor(($duration % 3600) / 60);
    $seconds = $duration % 60;

    $parts = [];

    if ($days > 0) {
        $parts[] = "$days hari";
    }
    if ($hours > 0) {
        $parts[] = "$hours jam";
    }
    if ($minutes > 0) {
        $parts[] = "$minutes menit";
    }
    if ($seconds > 0 || empty($parts)) {
        $parts[] = "$seconds detik";
    }

    return implode(' ', $parts);
}

function insertLogCron(string $message)
{
    $timestamp = now()->format('Y-m-d H:i:s');
    $date = now()->format('Y_m_d');
    $logFile = storage_path("logs/cron_{$date}.log");

    $logMessage = "[{$timestamp}] {$message}\n";

    file_put_contents($logFile, $logMessage, FILE_APPEND);
}
